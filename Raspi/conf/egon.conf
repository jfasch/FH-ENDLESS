# -*- python -*-

from endless.can_reader import CANReader
from endless.can_writer import CANWriter
from endless.mqtt import MQTTClient, MQTT_PublishSampleTagToTopic
from endless.sample_broadcaster import SampleBroadcaster
from endless.sample_filter import TagFilter
from endless.hysteresis import Hysteresis
from endless.switch_stdout import StdoutSwitch
from endless.sink_stdout import StdoutSink
from endless.sample_converter import SampleConverter
from endless import egon

CAN_IFACE = 'can0'
# CAN_IFACE = 'mein-test-can'

MQTT_ADDR = '192.168.220.142'
# MQTT_ADDR = '127.0.0.1'


COMPONENTS = []

can_reader = CANReader(CAN_IFACE)
humtemp_sensor_0x33 = egon.HumidityTemperatureSensor(can_id=0x33, tag='CAN@0x33')
humtemp_sensor_0x34 = egon.HumidityTemperatureSensor(can_id=0x34, tag='CAN@0x34')
COMPONENTS.extend([can_reader, humtemp_sensor_0x33, humtemp_sensor_0x34])

can_reader.frame_out.connect(humtemp_sensor_0x33.can_in)
can_reader.frame_out.connect(humtemp_sensor_0x34.can_in)

broadcaster = SampleBroadcaster()
COMPONENTS.append(broadcaster)

humtemp_sensor_0x33.outlet.connect(broadcaster.inlet)
humtemp_sensor_0x34.outlet.connect(broadcaster.inlet)

# broadcast_debug = StdoutSink(prefix='AFTER BROADCAST')
# COMPONENTS.append(broadcast_debug)
# broadcaster.outlet.connect(broadcast_debug.inlet)

# fixme: refactor filter just like converter
can33_filter = TagFilter('CAN@0x33')
COMPONENTS.append(can33_filter)
broadcaster.outlet.connect(can33_filter.inlet)

# fixme: dedicated (timestamp, temperature) interface for hysteresis
humtemp2temp = SampleConverter(egon.transform_hum_temp_to_temp)
COMPONENTS.append(humtemp2temp)
can33_filter.outlet.connect(humtemp2temp.inlet)

# fixme: dedicated (timestamp, temperature) interface for hysteresis
hysteresis = Hysteresis(20, 40)
COMPONENTS.append(hysteresis)
humtemp2temp.outlet.connect(hysteresis.inlet)

# fixme: SwitchBroadcaster (send switch notifications over mqtt)

# switch = StdoutSwitch('Hi Switch:')
# COMPONENTS.append(switch)
# hysteresis.switch.connect(switch.switch)

switch = egon.CANSwitch(can_id=0x40, number=7)
COMPONENTS.append(switch)
hysteresis.switch.connect(switch.switch)

can_writer = CANWriter(can_iface=CAN_IFACE)
COMPONENTS.append(can_writer)
switch.outlet.connect(can_writer.inlet)

humtemp2json = SampleConverter(egon.transform_hum_temp_to_json)
COMPONENTS.append(humtemp2json)
broadcaster.outlet.connect(humtemp2json.inlet)

publish_by_tag = MQTT_PublishSampleTagToTopic({
    'CAN@0x33': 'can-0x33',
    'CAN@0x34': 'can-0x34',
})
COMPONENTS.append(publish_by_tag)
humtemp2json.outlet.connect(publish_by_tag.inlet)

mqtt = MQTTClient(host=MQTT_ADDR)
COMPONENTS.append(mqtt)
publish_by_tag.publisher.connect(mqtt.publisher)
