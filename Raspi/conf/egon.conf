# -*- python -*-

from endless.can_reader import CANReader
from endless.can_writer import CANWriter
from endless.mqtt import MQTTClient, MQTT_PublishSampleTagToTopic
from endless.tee import Tee
from endless.filter import TagFilter
from endless.hysteresis import Hysteresis
from endless.switch_stdout import StdoutSwitch
from endless.sink_stdout import StdoutSink
from endless.sample_converter import SampleConverter
from endless import egon

CAN_IFACE = 'can0'
# CAN_IFACE = 'mein-test-can'

MQTT_ADDR = '192.168.220.142'
# MQTT_ADDR = '127.0.0.1'


COMPONENTS = []

can_reader = CANReader(CAN_IFACE)
humtemp_sensor_0x33 = HumidityTemperatureSensor(can_id=0x33, 'CAN@0x33')
humtemp_sensor_0x34 = HumidityTemperatureSensor(can_id=0x34, 'CAN@0x34')
COMPONENTS.extend([can_reader, humtemp_sensor_0x33, humtemp_sensor_0x34])

can_reader.frame_out.connect(humtemp_sensor_0x33.can_in)
can_reader.frame_out.connect(humtemp_sensor_0x34.can_in)

broadcaster = SampleBroadcaster()
COMPONENTS.append(broadcaster)

humtemp_sensor_0x33.outlet.connect(broadcaster.inlet)
humtemp_sensor_0x34.outlet.connect(broadcaster.inlet)

stdout = StdoutSink()
COMPONENTS.append(stdout)

broadcaster.outlet.connect(stdout.inlet)

# can33_filter = TagFilter('CAN@0x33')
# hysteresis = Hysteresis(20, 40)
# humtemp2temp = SampleConverter(egon.transform_hum_temp_to_temp)
# #switch = StdoutSwitch('Hi Switch:')
# switch = egon.CANSwitch(can_id=0x40, number=7)
# can_writer = CANWriter(can_iface=CAN_IFACE)
# mqtt = MQTTClient(host=MQTT_ADDR)
# humtemp2json = SampleConverter(egon.transform_hum_temp_to_json)
# publish_by_tag = MQTT_PublishSampleTagToTopic({
#     'CAN@0x33': 'can-0x33',
#     'CAN@0x34': 'can-0x34',
# })

# COMPONENTS = (
#     can_0x33,
#     can_0x34,
#     can2humtemp,
#     tee,
#     stdout,
#     mqtt,
#     humtemp2json,
#     publish_by_tag,
# )


# can_0x33.outlet.connect(can2humtemp.inlet)
# can_0x34.outlet.connect(can2humtemp.inlet)

# can2humtemp.outlet.connect(tee.inlet)
# humtemp2json.outlet.connect(publish_by_tag.inlet)
# publish_by_tag.publisher.connect(mqtt.publisher)

# tee.outlet.connect(humtemp2json.inlet)
# tee.outlet.connect(stdout.inlet)
# tee.outlet.connect(can33_filter.inlet)

# can33_filter.outlet.connect(humtemp2temp.inlet)
# humtemp2temp.outlet.connect(hysteresis.inlet)
# hysteresis.switch.connect(switch.switch)
# switch.outlet.connect(can_writer.inlet)

