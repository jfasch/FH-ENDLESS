# -*- python -*-

from endless.framework.sample import Sample
from endless.framework.source_mock import MockSource
from endless.framework.sink_stdout import StdoutSink
from endless.framework.mqtt import MQTT_PublishSampleTagToTopic, MQTTClient
from endless.framework.sample_filter import SampleFilter
from endless.framework import async_util

import datetime
import functools
import math
import json
import os


if 'MQTT_HOST' in os.environ:
    MQTT_HOST = os.environ.get('MQTT_HOST')
else:
    print('Environment variable MQTT_HOST not set, using localhost')
    MQTT_HOST = 'localhost'


source = MockSource(
    tag='sinewave', 
    timestamps=async_util.wallclock_timestamps_sleep(interval=datetime.timedelta(seconds=0.1)),
    data=functools.partial(async_util.yet_another_sin, amplitude=20, hz=5, phase_shift=math.pi/2, vertical_shift=36.5),
)
sample_to_json = SampleFilter(
    lambda sample: Sample(tag=sample.tag, 
                          timestamp=sample.timestamp, 
                          data=bytes(json.dumps({
                              "timestamp": sample.timestamp.isoformat(),
                              "data": sample.data}), encoding='ascii')
                          )
)
json_to_topic = MQTT_PublishSampleTagToTopic({'sinewave': 'sinewave'})
topic_to_mqtt = MQTTClient(host=MQTT_HOST)

source.sample_out.connect(sample_to_json.sample_in)
sample_to_json.sample_out.connect(json_to_topic.sample_in)
json_to_topic.publisher.connect(topic_to_mqtt.publisher)

COMPONENTS = (source, sample_to_json, json_to_topic, topic_to_mqtt)
